create table "public"."interested" (
    "id" uuid not null default gen_random_uuid(),
    "created_at" timestamp with time zone not null default now(),
    "user_id" uuid,
    "order_id" bigint,
    "value" numeric,
    "description" text,
    "accepted" boolean default false
);


create table "public"."orders" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "user_id" uuid,
    "form" json,
    "available" boolean default true
);


alter table "public"."orders" enable row level security;

alter table "public"."profiles" drop column "website";

alter table "public"."profiles" add column "professional" boolean default true;

CREATE UNIQUE INDEX "InterestedPartiesServices_pkey" ON public.interested USING btree (id);

CREATE UNIQUE INDEX orders_pkey ON public.orders USING btree (id);

alter table "public"."interested" add constraint "InterestedPartiesServices_pkey" PRIMARY KEY using index "InterestedPartiesServices_pkey";

alter table "public"."orders" add constraint "orders_pkey" PRIMARY KEY using index "orders_pkey";

alter table "public"."interested" add constraint "interested_order_id_fkey" FOREIGN KEY (order_id) REFERENCES orders(id) not valid;

alter table "public"."interested" validate constraint "interested_order_id_fkey";

alter table "public"."interested" add constraint "interested_user_id_fkey" FOREIGN KEY (user_id) REFERENCES profiles(id) not valid;

alter table "public"."interested" validate constraint "interested_user_id_fkey";

alter table "public"."orders" add constraint "orders_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) not valid;

alter table "public"."orders" validate constraint "orders_user_id_fkey";

create policy "Public profiles are viewable by everyone."
on "public"."orders"
as permissive
for select
to public
using (true);


create policy "Users can insert their own profile."
on "public"."orders"
as permissive
for insert
to public
with check ((auth.uid() = user_id));


create policy "Users can update own profile."
on "public"."orders"
as permissive
for update
to public
using ((auth.uid() = user_id));



